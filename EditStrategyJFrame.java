/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bitwars;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.tools.JavaCompiler;
import javax.tools.JavaCompiler.CompilationTask;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;

/**
 *
 * @author lyx
 */
public class EditStrategyJFrame extends javax.swing.JFrame {

    public static String[] tokensName = {"ADDEXP", "ADDOP", "COMPSMTM",
        "DECL", "DECLSTMT", "EXP", "EXPSTMT", "FACTOR", "ID", "IFSTMT",
        "MULOP", "NUM", "PROG", "RELOP", "RETURNSTMT", "SIMEXP", "STMT",
        "STMTLIST", "TERM", "VAR", "WHILESTMT"};

    /**
     * Creates new form AddStrategyJFrame
     */
    public EditStrategyJFrame(MainJFrame parent) {
        initComponents();
        this.jComboBoxStrategy = parent.getjComboBoxStrategy();
        this.strategyMap = parent.getStrategyMap();
        this.parent = parent;
        this.setTitle("编辑策略");
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.jTextFieldStrategyName.setText(this.jComboBoxStrategy.getSelectedItem().toString());
        this.jTextAreaStrategy.setText(parent.getStrategyMap().get(this.jTextFieldStrategyName.getText()));

        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
//              char ch = (char) b;
                jTextAreaOutput.append(String.valueOf((char) b));
            }
        };
        PrintStream err = new PrintStream(out);
        System.setErr(err);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jLabelEditArea = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jLabelOutput = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaStrategy = new javax.swing.JTextArea();
        jButtonStartAnalysis = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jButtonOpenFile = new javax.swing.JButton();
        jButtonSaveFile = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jTextFieldStrategyName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelEditArea.setText("策略名称：");

        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jScrollPane1.setViewportView(jTextAreaOutput);

        jLabelOutput.setText("分析输出：");

        jTextAreaStrategy.setColumns(20);
        jTextAreaStrategy.setRows(5);
        jTextAreaStrategy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaStrategyKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaStrategy);

        jButtonStartAnalysis.setText("开始分析");
        jButtonStartAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartAnalysisActionPerformed(evt);
            }
        });

        jButtonOK.setText("确定更改");
        jButtonOK.setEnabled(false);
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonOpenFile.setText("打开文件");
        jButtonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenFileActionPerformed(evt);
            }
        });

        jButtonSaveFile.setText("保存文件");
        jButtonSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFileActionPerformed(evt);
            }
        });

        jButtonExit.setText("取消");
        jButtonExit.setMaximumSize(new java.awt.Dimension(81, 23));
        jButtonExit.setMinimumSize(new java.awt.Dimension(81, 23));
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelEditArea)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldStrategyName))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelOutput)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButtonOK)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonStartAnalysis)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOpenFile)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSaveFile)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEditArea)
                    .addComponent(jLabelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldStrategyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonStartAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSaveFile, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        parent.setVisible(true);

        System.setErr(System.out);
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        if (jTextFieldStrategyName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "请输入策略名！");
            return;
        }

        for (int i = 0; i < jComboBoxStrategy.getItemCount(); i++) {
            if (i == jComboBoxStrategy.getSelectedIndex()) {
                continue;
            }
            if (jComboBoxStrategy.getItemAt(i).toString().equals(jTextFieldStrategyName.getText())) {
                JOptionPane.showMessageDialog(this, "此策略名已经存在，请输入不同的策略名！");
                return;
            }
        }

        System.setErr(System.out);
        if (!dynamicCompiling()) {
            JOptionPane.showMessageDialog(this, "编译出错，请检查语义！");
            return;
        }
        //删去当前title映射的策略
        strategyMap.remove(jComboBoxStrategy.getSelectedItem().toString());
        //更改Title名字
        int cur = jComboBoxStrategy.getSelectedIndex();
        jComboBoxStrategy.removeItemAt(cur);
        jComboBoxStrategy.insertItemAt(jTextFieldStrategyName.getText(), cur);
        //将更改后的映射加入到map
        strategyMap.put(jTextFieldStrategyName.getText(), jTextAreaStrategy.getText());
        jComboBoxStrategy.setSelectedIndex(cur);
        parent.getjTextAreaLookStrategyArea().setText(jTextAreaStrategy.getText());

        parent.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenFileActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "BitLanguage Source(*.b,*.bit,*.txt)", "b", "bit", "txt");
        jFileChooser.setFileFilter(filter);
        int result = jFileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File infile = jFileChooser.getSelectedFile();
            String title = infile.getName().substring(0, infile.getName().lastIndexOf("."));
            jTextFieldStrategyName.setText(title);
            try {
                BufferedReader reader = new BufferedReader(new FileReader(infile));
                String tempString = "";
                String str = "";
                while ((tempString = reader.readLine()) != null) {
                    str += tempString + "\n";
                }
                jTextAreaStrategy.setText(str);
                reader.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonOpenFileActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.setErr(System.out);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jButtonSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFileActionPerformed
        jFileChooser.setSelectedFile(new File(jTextFieldStrategyName.getText() + ".b"));
        int result = jFileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File outfile = jFileChooser.getSelectedFile();
            try {
                FileWriter writer = new FileWriter(outfile);
                writer.write(jTextAreaStrategy.getText().replace("\n", "\r\n"));
                writer.close();
                JOptionPane.showMessageDialog(this, "保存完成");
            } catch (IOException ex) {
                Logger.getLogger(EditStrategyJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonSaveFileActionPerformed

    private void jButtonStartAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartAnalysisActionPerformed
        jTextAreaOutput.setText("");
        String strategy = jTextAreaStrategy.getText();
        ANTLRStringStream in = new ANTLRStringStream(strategy);
        BitLanguageLexer lexer = new BitLanguageLexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        BitLanguageParser parse = new BitLanguageParser(tokens);
        root = null;
        try {
            root = parse.program().getTree();

        } catch (RecognitionException re) {
            parse.reportError(re);
            jTextAreaOutput.setText("语法有误：\n" + jTextAreaOutput.getText());
            jButtonOK.setEnabled(false);
            return;
        }
        jTextAreaOutput.setText("语法树如下：\n");
        printTree(root, 0);
        jButtonOK.setEnabled(true);
    }//GEN-LAST:event_jButtonStartAnalysisActionPerformed

    private void jTextAreaStrategyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaStrategyKeyPressed
        jButtonOK.setEnabled(false);
    }//GEN-LAST:event_jTextAreaStrategyKeyPressed

    private void printTree(CommonTree root, int depth) {
        if (root == null) {
            return;
        }
        for (int i = 0; i < depth; i++) {
            jTextAreaOutput.append(" ");
        }
        jTextAreaOutput.append("|-" + root.toString() + "\n");
        if (root.getChildren() != null) {
            for (Object t : root.getChildren()) {
                printTree((CommonTree) t, depth + 1);
            }
        }
    }

    private void analysisTree(StringBuffer result, CommonTree root) {
        if (root == null) {
            return;
        }
        boolean flag = true;
        for (String s : tokensName) {
            if (s.equals(root.toString())) {
                flag = false;
            }
        }
        if (flag) {
            result.append(root.toString() + " ");
        }
        if (root.getChildren() != null) {
            for (Object t : root.getChildren()) {
                analysisTree(result, (CommonTree) t);
            }
        }
    }

    private boolean dynamicCompiling() {
        try {
            StringBuffer result = new StringBuffer("");
            analysisTree(result, root);
            BufferedReader reader = null;
//            String source = "";
//            reader = new BufferedReader(new FileReader(new File(this.getClass().getClassLoader().getResource("resource/template.t").getPath())));
//            String tempString = null;
//            while ((tempString = reader.readLine()) != null) {
//                source += tempString;
//            }
//            reader.close();
            String source = "import java.util.Random;public class Strategy {	private Random random;		public Strategy(){		random = new Random();	}		private int RANDOM(int max){		return random.nextInt()%(max+1);	}	public int decision(Integer CUR, Integer[] ME, Integer[] ENEMY){		replaceHere	}}";

            BufferedWriter writer = new BufferedWriter(new FileWriter(System.getProperty("user.dir")
                    + "/Strategy" + parent.getjComboBoxStrategy().getSelectedIndex() + ".java"));
            source = source.replace("Strategy", "Strategy" + parent.getjComboBoxStrategy().getSelectedIndex());
            writer.write(source.replace("replaceHere", result));
            writer.close();

            JavaCompiler complier = ToolProvider.getSystemJavaCompiler();
            if(complier == null){
                Class<JavaCompiler> c = (Class<JavaCompiler>) Class.forName("com.sun.tools.javac.api.JavacTool");
		complier = c.newInstance();
            }
            StandardJavaFileManager sjf = complier.getStandardFileManager(null,
                    null, null);
            Iterable it = sjf.getJavaFileObjects(System.getProperty("user.dir")
                    + "/Strategy" + parent.getjComboBoxStrategy().getSelectedIndex()
                    + ".java");
            CompilationTask task = complier
                    .getTask(null, sjf, null, null, null, it);
            task.call(); // 调用创建
            sjf.close();

            String url = "file:/" +System.getProperty("user.dir") + "/";
            URL urls[] = new URL[]{new URL(url)}; // 储存文件目录的地址
            URLClassLoader uLoad = new URLClassLoader(urls); // classloader从哪个目录找？
            Class c = uLoad.loadClass("Strategy" + parent.getjComboBoxStrategy().getSelectedIndex()); // 找哪个class文件 注意不带后缀名
            int cur = parent.getjComboBoxStrategy().getSelectedIndex();
            parent.getClassList().remove(cur);
            parent.getClassList().add(cur, c.newInstance());

            File tmpFile = new File(System.getProperty("user.dir") + "/Strategy" + parent.getjComboBoxStrategy().getSelectedIndex() + ".java");
            tmpFile.delete();
            tmpFile = new File(System.getProperty("user.dir") + "/Strategy" + parent.getjComboBoxStrategy().getSelectedIndex() + ".class");
            tmpFile.delete();
        } catch (Exception ex) {
            Logger.getLogger(EditStrategyJFrame.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        return true;
    }

    private MainJFrame parent;
    private Map<String, String> strategyMap;
    private JComboBox jComboBoxStrategy;
    CommonTree root;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JButton jButtonOpenFile;
    private javax.swing.JButton jButtonSaveFile;
    private javax.swing.JButton jButtonStartAnalysis;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabelEditArea;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JTextArea jTextAreaStrategy;
    private javax.swing.JTextField jTextFieldStrategyName;
    // End of variables declaration//GEN-END:variables
}
